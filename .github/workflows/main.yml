name: Fly Deploy

on: [push]

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

jobs:
  test:
    name: Test
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: ['ubuntu-latest']
        elixir: ['1.12.x']
        otp: ['24.x']
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{matrix.elixir}}
          otp-version: ${{matrix.otp}}

      - name: Build cache
        uses: actions/cache@v2
        with:
          path: _build
          key: build-${{matrix.os}}-${{matrix.otp}}-${{matrix.elixir}}-${{ hashFiles('lib/**/*.ex') }}
          restore-keys: |
            build-${{matrix.os}}-${{matrix.otp}}-${{matrix.elixir}}-

      - name: Deps cache
        uses: actions/cache@v2
        with:
          path: deps
          key: deps-${{matrix.os}}-${{matrix.otp}}-${{matrix.elixir}}-${{ hashFiles('mix.lock') }}
          restore-keys: |
            deps-${{matrix.os}}-${{matrix.otp}}-${{matrix.elixir}}-

      # - name: Restore Dialyzer PLT cache
      #   uses: actions/cache@v2
      #   id: plt-cache
      #   with:
      #     path: priv/plts
      #     key: plt-${{matrix.os}}-${{matrix.otp}}-${{matrix.elixir}}-${{hashFiles('mix.lock')}}
      #     restore-keys: |
      #       plt-${{matrix.os}}-${{matrix.otp}}-${{matrix.elixir}}-

      - name: Install dependencies
        run: mix deps.get

      - name: Check formatting
        run: mix format --check-formatted

      - name: Compile test env
        run: mix compile
        env:
          MIX_ENV: test

      - name: Run unit tests
        run: mix test

      # - name: Create Dialyzer PLTs
      #   run: |
      #     mkdir -p priv/plts
      #     mix dialyzer --plt
      # - name: Run Dialyzer
      #   run: mix dialyzer

  deploy:
    name: Deploy
    needs: [test]
    if: contains('refs/heads/master', github.ref)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: superfly/flyctl-actions@1.1
        with:
          args: "deploy"
